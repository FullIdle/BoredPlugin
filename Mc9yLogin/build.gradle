plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow'
}
java {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
}
group = 'com.github.fullidle.boredplugin.mc9ylogin.Main'
version = '1.0'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation project(path: ':common')
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'
    compileOnly 'org.spigotmc:spigot:1.12.2-R0.1-SNAPSHOT'
    compileOnly 'org.spigotmc:spigot-api:1.12.2-R0.1-SNAPSHOT'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
    implementation "io.github.fanyong920:jvppeteer:1.1.5"
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

processResources {
    setFilteringCharset("UTF-8")
    expand project.properties
    doLast {
        if (project.rootProject.hasProperty('isRootProject')) {
            if (project.rootProject.property('isRootProject')){
                def sourceDir = file("$project.buildDir/resources/main")
                renameAllFile(sourceDir)
            }
        }
    }
}

def renameAllFile(File folder){
    for (final def f in folder.listFiles()) {
        if (f.isDirectory()) {
            renameAllFile(f)
        }else{
            if ('plugin.yml' != f.name){
                def renameFile = file("${f.parentFile}/${project.name}-${f.name}")
                f.renameTo(renameFile)
            }
        }
    }
}

shadowJar {
    mergeServiceFiles()
    archiveBaseName.set(archivesBaseName)
    archiveVersion.set(version)
    manifest {
        attributes 'Main-Class': project.group
    }
}